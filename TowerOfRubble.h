//#include <stdbool.h>
#include <avr/io.h>
#include <stdlib.h>
#include <avr/pgmspace.h>
#include <uzebox.h>
#include <bootlib.h>
#include <spiram.h>

#include "data/patches.inc"//TODO REMOVE THIS...
#include "data/inc/tiles.inc"
#include "data/inc/sprites.inc"

extern uint8_t ram_tiles[];
//extern uint8_t free_tile_index;

#define TOWER_OF_RUBBLE_EEPROM_ID		0x46//check if this is free

extern u8 joypad1_status_lo,joypad2_status_lo;

#define MAX_PLAYERS	2
u8 pmax;
u8 px[MAX_PLAYERS],py[MAX_PLAYERS],pframe[MAX_PLAYERS],pftime[MAX_PLAYERS],poffset[MAX_PLAYERS],pstate[MAX_PLAYERS];
u16 pscore[MAX_PLAYERS];
u8 last_pad[MAX_PLAYERS],pad[MAX_PLAYERS];
sdc_struct_t sd_struct;
//u32 file_start;//raw offsets are stored in SPI RAM

#define STATE_IDLE	(0|1)
#define STATE_RIGHT	1	//facing right(or not)
#define STATE_RUN	2	//running 1 square
#define STATE_HOP	4	//hopping up to ledge hang
#define STATE_HANG	8	//hanging from ledge
#define STATE_CLIMB_D	16	//climbing from ledge hang to top
#define STATE_CLIMB_U	32	//climbing from top to ledge hang
#define STATE_JUMP	64	//jumping horizontally
#define STATE_FALLING	128
#define STATE_DYING	250	//killed, animating explosion
#define STATE_HISCORE	254	//entering highscore(or immediately skipped)
#define STATE_DEAD	255	//not processing input until all players dead

#define GS_TITLE_SCREEN	1
#define GS_COOP		2
#define GS_VERSUS	4
#define GS_SONG_LOADED	32
#define GS_NO_SD	64
#define GS_NO_SPIR	128

#define FIRST_TITLE_TILE 0
#define NUM_TITLE_TILES	37
#define LAST_TITLE_TILE FIRST_TITLE_TILE+NUM_TITLE_TILES-1

#define FIRST_ALPHA_TILE LAST_TITLE_TILE+1
#define NUM_ALPHA_TILES	26
#define LAST_ALPHA_TILE FIRST_ALPHA_TILE+NUM_ALPHA_TILES-1

#define FIRST_SYMBOL_TILE LAST_ALPHA_TILE+1
#define NUM_SYMBOL_TILES 3
#define LAST_SYMBOL_TILE FIRST_SYMBOL_TILE+NUM_SYMBOL_TILES-1

#define FIRST_NUM_TILE LAST_SYMBOL_TILE+1
#define NUM_NUM_TILES 10
#define LAST_NUM_TILE FIRST_NUM_TILE+NUM_NUM_TILES-1

#define FIRST_STAR_TILE LAST_NUM_TILE+1
#define NUM_STAR_TILES 16
#define LAST_STAR_TILE FIRST_STAR_TILE+NUM_STAR_TILES-1

#define FIRST_MOON_TILE LAST_STAR_TILE+1
#define NUM_MOON_TILES 9
#define LAST_MOON_TILE FIRST_MOON_TILE+NUM_MOON_TILES-1

#define FIRST_GROUND_TILE LAST_MOON_TILE+1
#define NUM_GROUND_TILES 3
#define NUM_DISSOLVE_FRAMES 4
#define LAST_GROUND_TILE FIRST_GROUND_TILE+(NUM_GROUND_TILES*2)+(NUM_DISSOLVE_FRAMES*2*NUM_GROUND_TILES)-1

#define FIRST_LAVA_TILE LAST_GROUND_TILE+1
#define NUM_LAVA_TILES 8
#define LAST_LAVA_TILE FIRST_LAVA_TILE+NUM_LAVA_TILES-1

#define FIRST_BEAM_TILE	LAST_LAVA_TILE+1
#define NUM_BEAM_TILES 16+9
#define FIRST_BEAM_WIDE_TILE FIRST_BEAM_TILE+16
#define LAST_BEAM_TILE FIRST_BEAM_TILE+NUM_BEAM_TILES-1

#define FIRST_PLAYER_SPRITE 0
#define NUM_PLAYER_SPRITES 48
#define NUM_PLAYER_COLORS 2
#define LAST_PLAYER_SPRITE FIRST_PLAYER_SPRITE+(NUM_PLAYER_SPRITES*NUM_PLAYER_COLORS)-1

#define FIRST_LAVA_SPRITE LAST_PLAYER_SPRITE+1
#define NUM_LAVA_SPRITES NUM_LAVA_TILES
#define LAST_LAVA_SPRITE FIRST_LAVA_SPRITE+NUM_LAVA_SPRITES-1

u16 global_frame;
u8 global_frame60;
u8 game_state;
u8 lava_timer;
u8 sprite_num;






u8 beam_v_next;//single block every second
u8 beam_v_x;

u16 beam_v_wide_next;//2 beams of 2 horizontal blocks, always simultaneous(starting at 23, then 33,43,53,etc.)
u8 beam_v_wide_x[2];

u16 beam_v_tall_next[3];//3 beams of 2 vertical blocks(start staggered going up to 3(at 63?) total,these will sometimes sync together..)
u8 beam_v_tall_x[3];

u16 beam_h_next;//horizontal beam across entire screen(starting at 45, then 60,75,90,etc.)
u8 beam_h_y;

u16 island_dissolve_next;//erodes 2 blocks horizontally(all the way up vertically, starting at 11, lasting 4.5(?) frames before dropping)
u8 island_dissolve_x[2];//leftmost of 2 block wide section(needn't be the same island)


void TorPrint(int x,int y,const char *string);
void TorPrintInt(u8 x, u8 y, u16 v);
void TitleScreenSetup();
void TitleScreenUpdate();
void Intro();
void ResetSprites();
void LoadMap();
void PopulateStars();
void AnimateStars();
void RestoreStarColumn(u8 x);
void RestoreStarRow(u8 y);
void AnimateLava();
void LoadSpiRamSong(u8 s);
void LoadingTransition();//load level music while doing a (cycle friendly) transition
void CheckPlayerHit(u8 x, u8 y);
void CheckPlayerHitColumn(u8 x);
void CheckPlayerHitRow(u8 y);
u32 SpiRamCopyByIndex(u32 dst, u8 src, char *buf);

const u8 practice_map[] PROGMEM = {
4,4,7,27,3,
0b10010000,0b00000100,0b10000000,0b00100100,
0b10110100,0b10100100,0b10010100,0b10110100,
0b11111111,0b11111100,0b11111111,0b11111100,
0b11111111,0b11111100,0b11111111,0b11111100,
};

const u8 game_map[] PROGMEM = {
6,7,3,24,3,
0b00000000,0b00000101,0b00000000,0b0000000,
0b00000000,0b00001111,0b10000000,0b0000000,
0b01000000,0b00011111,0b11000000,0b0001000,
0b01100000,0b00111111,0b11100000,0b0011000,
0b01110111,0b11111111,0b11111111,0b0111000,
0b01110111,0b11111111,0b11111111,0b0111000,
};


const u8 star_map[] PROGMEM = {//raw VRAM values(for faster restores), needs to be regenerated if RAM_TILES_COUNT or SCREEN_TILES_[] is changed

0x77,0x73,0x24,0x72,0x24,0x24,0x24,0x75,0x24,0x24,0x71,0x70,0x70,0x80,0x81,0x82,0x24,0x74,0x24,0x76,0x24,0x77,0x73,0x71,0x24,0x71,0x24,0x75,0x24,0x76,0x24,0x24,0x24,0x75,0x24,0x24,0x75,0x72,0x24,0x72,0x24,0x24,0x77,0x83,0x84,0x85,0x73,0x24,0x74,0x72,0x24,0x76,0x73,0x24,0x72,0x24,0x72,0x71,0x24,0x24,0x24,0x24,0x71,0x70,0x70,0x24,0x71,0x24,0x24,0x71,0x70,0x24,0x76,0x86,0x87,0x88,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x77,0x24,0x73,0x24,0x24,0x24,0x75,0x72,0x24,0x74,0x72,0x24,0x77,0x24,0x75,0x72,0x24,0x24,0x75,0x72,0x24,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x72,0x24,0x24,0x70,0x24,0x74,0x24,0x70,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x75,0x24,0x72,0x24,0x24,0x77,0x73,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x77,0x73,0x24,0x24,0x24,0x71,0x24,0x24,0x77,0x24,0x24,0x24,0x70,0x70,0x24,0x76,0x24,0x73,0x24,0x76,0x24,0x75,0x24,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x76,0x24,0x24,0x73,0x24,0x77,0x24,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x72,0x24,0x24,0x74,0x24,0x76,0x24,0x24,0x77,0x73,0x71,0x70,0x70,0x24,0x24,0x24,0x24,0x24,0x77,0x73,0x71,0x24,0x76,0x73,0x24,0x72,0x24,0x24,0x77,0x73,0x24,0x76,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x24,0x72,0x71,0x24,0x24,0x24,0x77,0x24,0x24,0x24,0x71,0x24,0x24,0x24,0x24,0x75,0x24,0x24,0x24,0x24,0x70,0x24,0x71,0x70,0x70,0x24,0x24,0x72,0x24,0x74,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x77,0x24,0x24,0x74,0x24,0x77,0x24,0x70,0x24,0x24,0x24,0x72,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x71,0x24,0x24,0x24,0x73,0x71,0x24,0x76,0x24,0x24,0x24,0x77,0x73,0x24,0x24,0x75,0x72,0x24,0x24,0x24,0x72,0x24,0x76,0x24,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x76,0x24,0x24,0x24,0x24,0x75,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x24,0x24,0x24,0x74,0x72,0x71,0x24,0x71,0x70,0x70,0x24,0x24,0x71,0x24,0x74,0x24,0x24,0x76,0x24,0x70,0x24,0x74,0x24,0x76,0x24,0x24,0x24,0x77,0x73,0x24,0x77,0x24,0x70,0x24,0x75,0x24,0x76,0x73,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x71,0x70,0x24,0x24,0x75,0x72,0x24,0x72,0x24,0x24,0x24,0x24,0x24,0x71,0x24,0x24,0x24,0x24,0x24,0x74,0x72,0x24,0x77,0x73,0x71,0x24,0x24,0x24,0x77,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x74,0x24,0x77,0x24,0x24,0x75,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x72,0x24,0x24,0x24,0x74,0x24,0x24,0x24,0x76,0x24,0x24,0x71,0x70,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x71,0x70,0x70,0x70,0x24,0x75,0x24,0x24,0x77,0x24,0x75,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x76,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x73,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x77,0x73,0x24,0x24,0x24,0x73,0x71,0x70,0x70,0x70,0x24,0x71,0x24,0x24,0x74,0x24,0x72,0x24,0x24,0x71,0x24,0x24,0x74,0x24,0x24,0x74,0x24,0x77,0x24,0x24,0x76,0x24,0x75,0x24,0x77,0x24,0x75,0x24,0x77,0x24,0x77,0x24,0x24,0x73,0x71,0x70,0x24,0x24,0x74,0x24,0x24,0x76,0x24,0x24,0x24,0x24,0x70,0x24,0x24,0x74,0x24,0x24,0x71,0x24,0x71,0x24,0x24,0x77,0x24,0x24,0x24,0x24,0x74,0x24,0x75,0x24,0x77,0x24,0x24,0x24,0x74,0x24,0x76,0x24,0x70,0x70,0x24,0x24,0x24,0x24,0x24,0x72,0x24,0x74,0x72,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x76,0x24,0x24,0x77,0x24,0x24,0x24,0x72,0x71,0x70,0x24,0x76,0x73,0x24,0x77,0x24,0x24,0x24,0x71,0x24,0x75,0x24,0x24,0x72,0x24,0x24,0x24,0x24,0x76,0x24,0x73,0x24,0x24,0x77,0x24,0x75,0x24,0x75,0x24,0x76,0x24,0x24,0x24,0x75,0x72,0x71,0x24,0x76,0x24,0x24,0x24,0x77,0x24,0x77,0x24,0x75,0x24,0x24,0x71,0x70,0x24,0x74,0x72,0x24,0x24,0x77,0x24,0x77,0x24,0x24,0x24,0x24,0x77,0x73,0x24,0x24,0x74,0x24,0x24,0x24,0x24,0x24,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x77,0x24,0x24,0x74,0x72,0x24,0x24,0x24,0x24,0x24,0x75,0x24,0x24,0x75,0x24,0x24,0x77,0x24,0x77,0x24,0x24,0x71,0x24,0x24,0x76,0x73,0x24,0x24,0x76,0x73,0x24,0x77,0x73,0x24,0x24,0x24,0x24,0x77,0x24,0x77,0x24,0x77,0x24,0x70,0x24,0x74,0x24,0x24,0x24,0x24,0x24,0x73,0x71,0x24,0x24,0x24,0x24,0x24,0x24,0x77,0x24,0x24,0x24,0x24,0x24,0x24,0x75,0x72,0x24,0x72,0x24,0x24,0x24,0x24,0x24,0x24,0x74,0x72,0x24,0x24,0x74,0x24,0x72,0x24,0x24,0x74,0x24,0x72,0x24,0x24,0x70,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x75,0x24,0x24,0x75,0x24,0x70,0x70,0x24,0x24,0x24,0x24,0x75,0x24,0x72,0x24,0x24,0x77,0x24,0x24,0x24,0x24,0x76,0x24,0x24,0x76,0x24,0x24,0x24,0x24,0x73,0x24,0x24,0x72,0x24,0x24,0x76,0x24,0x24,0x71,0x70,0x24,0x75,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x71,0x24,0x24,0x77,

};

const u8 ground_map[] PROGMEM = {//not needed?

};

void db(){TriggerFx(1,255,1);}